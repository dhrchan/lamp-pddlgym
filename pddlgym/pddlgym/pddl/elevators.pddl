(define (domain elevators)
  (:requirements :probabilistic-effects :conditional-effects :negative-preconditions :equality :typing)
  (:types elevator floor pos coin)
  (:predicates  (dec_f ?f - floor ?g - floor) 
                (dec_p ?p - pos ?q - pos) 
                (in ?e - elevator ?f - floor) 
                (at ?f - floor ?p - pos) 
                (shaft ?e - elevator ?p - pos) 
                (inside ?e - elevator) 
                (gate ?f - floor ?p - pos) 
                (coin-at ?c - coin ?f - floor ?p - pos) 
                (have ?c - coin)
                (basefloor ?f - floor)
                (basepos ?p - pos)
                (goup ?e - elevator)
                (godown ?e - elevator)
                (stepin ?e - elevator)
                (stepout ?e - elevator)
                (moveleft)
                (moveleftgate)
                (moveright)
                (moverightgate)
                (collect ?c - coin)
  )
  ; (:actions goup godown stepin stepout moveleft moveleftgate moveright moverightgate collect)
  (:action go-up
    :parameters (?e - elevator ?f - floor ?nf - floor)
    :precondition (and (goup ?e) (dec_f ?nf ?f) (in ?e ?f))
    :effect (and (in ?e ?nf) (not (in ?e ?f)))
  )
  (:action go-down
    :parameters (?e - elevator ?f - floor ?nf - floor)
    :precondition (and (godown ?e) (dec_f ?f ?nf) (in ?e ?f))
    :effect (and (in ?e ?nf) (not (in ?e ?f)))
  )
  (:action step-in
    :parameters (?e - elevator ?f - floor ?p - pos)
    :precondition (and (stepin ?e) (at ?f ?p) (in ?e ?f) (shaft ?e ?p))
    :effect (and (inside ?e) (not (at ?f ?p)))
  )
  (:action step-out
    :parameters (?e - elevator ?f - floor ?p - pos)
    :precondition (and (stepout ?e) (inside ?e) (in ?e ?f) (shaft ?e ?p))
    :effect (and (at ?f ?p) (not (inside ?e)))
  )
  (:action move-left
    :parameters (?f - floor ?p - pos ?np - pos)
    :precondition (and (moveleft) (at ?f ?p) (dec_p ?p ?np) (not (gate ?f ?p)))
    :effect (and (not (at ?f ?p)) (at ?f ?np))
  )
  (:action move-left-gate
    :parameters (?f - floor ?bf - floor ?p - pos ?np - pos ?bp - pos)
    :precondition (and (moveleftgate) (at ?f ?p) (dec_p ?p ?np) (gate ?f ?p) (basefloor ?bf) (basepos ?bp))
    :effect (and (probabilistic 0.5 (and (not (at ?f ?p)) (at ?bf ?bp))
                                0.5 (and (not (at ?f ?p)) (at ?f ?np))))
  )
  (:action move-right
    :parameters (?f - floor ?p - pos ?np - pos)
    :precondition (and (moveright) (at ?f ?p) (dec_p ?np ?p) (not (gate ?f ?p)))
    :effect (and (not (at ?f ?p)) (at ?f ?np))
  )
  (:action move-right-gate
    :parameters (?f - floor ?bf - floor ?p - pos ?np - pos ?bp - pos)
    :precondition (and (moverightgate) (at ?f ?p) (dec_p ?np ?p) (gate ?f ?p) (basefloor ?bf) (basepos ?bp))
    :effect (and (probabilistic 0.5 (and (not (at ?f ?p)) (at ?bf ?bp))
                                0.5 (and (not (at ?f ?p)) (at ?f ?np))))
  )
  (:action collect
    :parameters (?c - coin ?f - floor ?p - pos)
    :precondition (and (collect ?c) (coin-at ?c ?f ?p) (at ?f ?p))
    :effect (and (have ?c) (not (coin-at ?c ?f ?p)))
  )
)
